apiVersion: trust.cert-manager.io/v1alpha1
kind: Bundle
metadata:
  name: internal-ca  # The bundle name will also be used for the target
spec:
  sources:
  # Include a bundle of publicly trusted certificates which can be
  # used to validate most TLS certificates on the internet, such as
  # those issued by Let's Encrypt, Google, Amazon and others.
  # NB: Unless you pin the pac
  # - useDefaultCAs: true
  - secret:
      name: root-secret
      key: "ca.crt"
  target:
    # Sync the bundle to a ConfigMap called `my-org.com` in every namespace which
    # has the label "linkerd.io/inject=enabled"
    # All ConfigMaps will include a PEM-formatted bundle, here named "root-certs.pem"
    # and in this case we also request binary formatted bundles in JKS and PKCS#12 formats,
    # here named "bundle.jks" and "bundle.p12".
    configMap:
      key: "root-certs.pem"
    namespaceSelector: {}
---
# See https://blog.min.io/certificate-management-minio-operator/
apiVersion: trust.cert-manager.io/v1alpha1
kind: Bundle
metadata:
  name: operator-ca-tls-myminio  # Convention of minio. Must be operator-ca-tls-<tenantname> Used by the operator to find the ca for the tenant. https://github.com/minio/operator/blob/master/docs/cert-manager.md#create-operator-ca-tls-tenant-1-secret
spec:
  sources:
    # Include a bundle of publicly trusted certificates which can be
    # used to validate most TLS certificates on the internet, such as
    # those issued by Let's Encrypt, Google, Amazon and others.
    # NB: Unless you pin the pac
    # - useDefaultCAs: true
    - secret:
        name: root-secret
        key: "ca.crt"
  target:
    secret:
      key: ca.crt
    namespaceSelector:
      matchLabels:
        kubernetes.io/metadata.name: minio-operator