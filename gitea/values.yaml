gitea:

  valkey-cluster:
    enabled: false
  valkey:
    enabled: false

  # TODO
  # https://gitea.com/gitea/helm-gitea#external-database
  # Any external database listed in https://docs.gitea.com/installation/database-prep can be used instead of the built-in PostgreSQL.
  # In fact, it is highly recommended to use an external database to ensure a stable Gitea installation longterm.
  postgresql:
    global:
      security:
        allowInsecureImages: true
    # TODO FU bitnami....
    image:
      repository: bitnamilegacy/postgresql
    enabled: true
    auth:
      enablePostgresUser: true
      username: gitea
      database: gitea
      existingSecret: postgres-users
    primary:
      # Modify hba configuration to include replication. Required for pg_basebackup
      pgHbaConfiguration: |
        host     all             all             0.0.0.0/0               md5
        host     all             all             ::/0                    md5
        local    all             all                                     md5
        host     all             all        127.0.0.1/32                 md5
        host     all             all        ::1/128                      md5
        local   replication             postgres                         md5
      extraVolumeMounts:
      - mountPath: /backup
        name: backup-volume
      extraVolumes:
        - name: backup-volume
          # Must use a scratch pvc because velero wouldn't backup an emptydir...
          persistentVolumeClaim:
            claimName: gitea-db-dump
      podAnnotations:
        pre.hook.backup.velero.io/command: '["/bin/sh", "-c", "PGPASSWORD=$(cat $POSTGRES_POSTGRES_PASSWORD_FILE) pg_basebackup -D /backup/current -X fetch -U postgres --no-password"]'
        pre.hook.backup.velero.io/timeout: 120s
        post.hook.backup.velero.io/command: '["rm", "-R", "/backup/current"]'
      persistence:
        existingClaim: gitea-db

  postgresql-ha:
    enabled: false

  persistence:
    enabled: true
    create: false
    claimName: gitea-shared-storage

  service:
    ssh:
      type: LoadBalancer
      externalTrafficPolicy: Local
      annotations:
        external-dns.alpha.kubernetes.io/hostname: ssh.git.felix-prasse.de
  gitea:
    admin:
      existingSecret: gitea-admin-secret
    additionalConfigFromEnvs:
      - name: GITEA__DATABASE__HOST
        valueFrom:
          secretKeyRef:
            name: pg-gitea-app
            key: host
      - name: GITEA__database__NAME
        valueFrom:
          secretKeyRef:
            name: pg-gitea-app
            key: dbname
      - name: GITEA__database__USER
        valueFrom:
          secretKeyRef:
            name: pg-gitea-app
            key: username
      - name: GITEA__DATABASE__PASSWD
        valueFrom:
          secretKeyRef:
            name: pg-gitea-app
            key: password
    config:
      queue:
        TYPE: redis
        CONN_STR: "redis://gitea-valkey.gitea.svc.cluster.local:6379/0?pool_size=100&idle_timeout=180s&"

      session:
        PROVIDER: redis
        PROVIDER_CONFIG: "redis://gitea-valkey.gitea.svc.cluster.local:6379/0?pool_size=100&idle_timeout=180s&"

      cache:
        ENABLED: true
        ADAPTER: redis
        HOST: "redis://gitea-valkey.gitea.svc.cluster.local:6379/0?pool_size=100&idle_timeout=180s&"

      database:
        DB_TYPE: postgres
      indexer:
        ISSUE_INDEXER_TYPE: bleve
        REPO_INDEXER_ENABLED: true
      server:
        SSH_DOMAIN: ssh.git.felix-prasse.de

  ingress:
    enabled: true
    className: public-nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: "git.felix-prasse.de"
        paths:
          - path: /
            pathType: Prefix
    tls:
      - hosts:
          - "git.felix-prasse.de"
        secretName: gitea-cert # < cert-manager will store the created certificate in this secret.