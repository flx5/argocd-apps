nextcloud:
  #podAnnotations:
  #  pre.hook.backup.velero.io/command: '["./occ", "maintenance:mode", "--on"]'
  #  post.hook.backup.velero.io/command: '["./occ", "maintenance:mode", "--off"]'

# TODO
  # https://github.com/nextcloud/helm/pull/673#issuecomment-2763302385

  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          preference:
            matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                  - nas

  ingress:
    enabled: true
    className: public-nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/affinity: cookie
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: "X-Forwarded-For"
      nginx.ingress.kubernetes.io/proxy-body-size: "4096m"
    tls:
      - hosts:
          - cloud.felix-prasse.de
        secretName: nextcloud-cert # < cert-manager will store the created certificate in this secret.
  # TODO Run this as init container: NEXTCLOUD_UPDATE=1 /entrypoint.sh /bin/sh -c 'exit 0'
  # See also: https://github.com/nextcloud/helm/pull/344...
  # TODO Maybe add some argo hooks to backup / snapshot /  migrate the database?
  # TODO https://www.allerstorfer.at/nextcloud-install-preview-generator/

  # TODO Run occ maintenance:repair --include-expensive after upgrade:
  # One or more mimetype migrations are available.
  # Occasionally new mimetypes are added to better handle certain file types.
  # Migrating the mimetypes take a long time on larger instances so this is not done automatically during upgrades.
  # Use the command `occ maintenance:repair --include-expensive` to perform the migrations.

  # TODO Run occ db:add-missing-indices after upgrade
  # Maybe just use hooks like here: https://github.com/nextcloud/helm/pull/673#issuecomment-2763302385

  livenessProbe:
    # TODO Disabled because at startup nextcloud copies its files to the pv. This would kill the container too early...
    enabled: false
  readinessProbe:
    enabled: false
  phpClientHttpsFix:
    enabled: true
    protocol: https
  nextcloud:
    host: "cloud.felix-prasse.de"
    podSecurityContext:
      # See
      # https://kubernetes.io/blog/2020/12/14/kubernetes-release-1.20-fsgroupchangepolicy-fsgrouppolicy/
      # https://github.com/kubernetes/kubernetes/issues/69699
      # https://longhorn.io/docs/1.8.1/nodes-and-volumes/volumes/pvc-ownership-and-permission/#longhorn-pvc-with-block-volume-mode
      fsGroupChangePolicy: "OnRootMismatch"
      runAsNonRoot: true
      runAsUser: 33
      runAsGroup: 33
      seccompProfile:
        type: RuntimeDefault

    # Workaround https://github.com/nextcloud/docker/issues/763#issuecomment-2752172569
    extraInitContainers:
      # create empty redis file for nextcloud entrypoint to override it
      - name: init-redis-session-ini
        image: busybox:1.37
        command: [ 'touch', '/usr/local/etc/php/conf.d/redis-session.ini' ]
        volumeMounts:
          - name: nextcloud-redis-session-ini
            mountPath: "/usr/local/etc/php/conf.d"

    # Set securityContext parameters for the nextcloud CONTAINER only (will not affect nginx container).
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
    extraEnv:
      - name: PHP_MEMORY_LIMIT
        value: 1G
    extraVolumeMounts:
      - name: cron-config
        mountPath: /var/spool/cron/crontabs/www-data
        subPath: crontab
      - name: nextcloud-redis-session-ini
        mountPath: "/usr/local/etc/php/conf.d/redis-session.ini" # fix permission denied error
        subPath: redis-session.ini
    extraVolumes:
      - name: cron-config
        configMap:
          name: cron-config
      - name: nextcloud-redis-session-ini
        emptyDir: {}
    defaultConfigs:
      imaginary.config.php: true
    configs:
      proxy.config.php: |-
        <?php
        $CONFIG = array (
          'trusted_proxies' => array(
            0 => '127.0.0.1',
            1 => '10.0.0.0/8',
          ),
          'forwarded_for_headers' => array('HTTP_X_FORWARDED_FOR'),
        );
      phone.config.php: |-
        <?php
        $CONFIG = array (
          'default_phone_region' => 'DE',
        );
      # https://docs.nextcloud.com/server/28/admin_manual/configuration_server/background_jobs_configuration.html#maintenance-window-start
      maintenance_window.config.php: |-
        <?php
        $CONFIG = array (
          'maintenance_window_start' => 1,
        );
      logging.config.php: |-
        <?php
        $CONFIG = array (
          "log_type" => "errorlog",
        );
  internalDatabase:
    enabled: false
  redis:
    enabled: true
    master:
      persistence:
        enabled: false
    auth:
      enabled: false
    replica:
      replicaCount: 0
    podSecurityContext:
      # See
      # https://kubernetes.io/blog/2020/12/14/kubernetes-release-1.20-fsgroupchangepolicy-fsgrouppolicy/
      # https://github.com/kubernetes/kubernetes/issues/69699
      # https://longhorn.io/docs/1.8.1/nodes-and-volumes/volumes/pvc-ownership-and-permission/#longhorn-pvc-with-block-volume-mode
      fsGroupChangePolicy: "OnRootMismatch"
  cronjob:
    enabled: true
  persistence:
    enabled: true
    existingClaim: nextcloud-nextcloud-v2
    nextcloudData:
      enabled: true
      existingClaim: nextcloud-data-v2
  externalDatabase:
    existingSecret:
      enabled: true
      secretName: mariadb-secret
      passwordKey: mariadb-password
      usernameKey: nextcloud-user

  mariadb:
    enabled: true
    auth:
      existingSecret: mariadb-secret
    primary:
      extraVolumeMounts:
        - mountPath: /backup
          name: backup-volume
      extraVolumes:
        - name: backup-volume
          # Must use a scratch pvc because velero wouldn't backup an emptydir...
          persistentVolumeClaim:
            claimName: nextcloud-db-dump
      podAnnotations:
        pre.hook.backup.velero.io/command: '["/bin/sh", "-c", "mariadb-backup --backup --target-dir=/backup/current/ --user=root --password=$MARIADB_ROOT_PASSWORD"]'
        pre.hook.backup.velero.io/timeout: 10m
        post.hook.backup.velero.io/command: '["rm", "-R", "/backup/current"]'
      persistence:
        enabled: true
        existingClaim: nextcloud-db
    podSecurityContext:
      # See
      # https://kubernetes.io/blog/2020/12/14/kubernetes-release-1.20-fsgroupchangepolicy-fsgrouppolicy/
      # https://github.com/kubernetes/kubernetes/issues/69699
      # https://longhorn.io/docs/1.8.1/nodes-and-volumes/volumes/pvc-ownership-and-permission/#longhorn-pvc-with-block-volume-mode
      fsGroupChangePolicy: "OnRootMismatch"

  imaginary:
    enabled: true
    securityContext:
      runAsUser: 1000
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
         - ALL