postgres:
  version: 17

valkey:
  fullnameOverride: nextcloud-valkey
  podSecurityContext:
    fsGroupChangePolicy: "OnRootMismatch"
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  securityContext:
    allowPrivilegeEscalation: false

nextcloud:
  #podAnnotations:
  #  pre.hook.backup.velero.io/command: '["./occ", "maintenance:mode", "--on"]'
  #  post.hook.backup.velero.io/command: '["./occ", "maintenance:mode", "--off"]'

# TODO
  # https://github.com/nextcloud/helm/pull/673#issuecomment-2763302385
  # TODO https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#proxy-request-buffering


  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/affinity: cookie
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: "X-Forwarded-For"
      nginx.ingress.kubernetes.io/proxy-buffering: "off"
      nginx.ingress.kubernetes.io/proxy-body-size: "4096m"
  # TODO Run this as init container: NEXTCLOUD_UPDATE=1 /entrypoint.sh /bin/sh -c 'exit 0'
  # See also: https://github.com/nextcloud/helm/pull/344...
  # TODO Maybe add some argo hooks to backup / snapshot /  migrate the database?
  # https://github.com/vmware-tanzu/velero/discussions/6967
  # TODO https://www.allerstorfer.at/nextcloud-install-preview-generator/

  # TODO Run occ maintenance:repair --include-expensive after upgrade:
  # One or more mimetype migrations are available.
  # Occasionally new mimetypes are added to better handle certain file types.
  # Migrating the mimetypes take a long time on larger instances so this is not done automatically during upgrades.
  # Use the command `occ maintenance:repair --include-expensive` to perform the migrations.

  # TODO Run occ db:add-missing-indices after upgrade
  # Maybe just use hooks like here: https://github.com/nextcloud/helm/pull/673#issuecomment-2763302385

# TODO Delete data/updater-ocjy6onqgvnt/backups/

  livenessProbe:
    # TODO Disabled because at startup nextcloud copies its files to the pv. This would kill the container too early...
    enabled: false
  readinessProbe:
    enabled: false
  phpClientHttpsFix:
    enabled: true
    protocol: https
  nextcloud:
    podSecurityContext:
      # See
      # https://kubernetes.io/blog/2020/12/14/kubernetes-release-1.20-fsgroupchangepolicy-fsgrouppolicy/
      # https://github.com/kubernetes/kubernetes/issues/69699
      # https://longhorn.io/docs/1.8.1/nodes-and-volumes/volumes/pvc-ownership-and-permission/#longhorn-pvc-with-block-volume-mode
      fsGroupChangePolicy: "OnRootMismatch"
      runAsNonRoot: true
      runAsUser: 33
      runAsGroup: 33
      seccompProfile:
        type: RuntimeDefault

    # Workaround https://github.com/nextcloud/docker/issues/763#issuecomment-2752172569
    extraInitContainers:
      # create empty redis file for nextcloud entrypoint to override it
      - name: init-redis-session-ini
        image: busybox:1.37
        command: [ 'touch', '/usr/local/etc/php/conf.d/redis-session.ini' ]
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        volumeMounts:
          - name: nextcloud-redis-session-ini
            mountPath: "/usr/local/etc/php/conf.d"

    # Set securityContext parameters for the nextcloud CONTAINER only (will not affect nginx container).
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
    extraEnv:
      - name: PHP_MEMORY_LIMIT
        value: 1G
      - name: REDIS_HOST
        value: nextcloud-valkey
    extraVolumeMounts:
      - name: nextcloud-redis-session-ini
        mountPath: "/usr/local/etc/php/conf.d/redis-session.ini" # fix permission denied error
        subPath: redis-session.ini
    extraVolumes:
      - name: cron-config
        configMap:
          name: cron-config
      - name: nextcloud-redis-session-ini
        emptyDir: {}
    defaultConfigs:
      imaginary.config.php: true
    configs:
      # TODO config.php is currently writeable. Is this supposed to be this way?
      proxy.config.php: |-
        <?php
        $CONFIG = array (
          'trusted_proxies' => array(
            0 => '127.0.0.1',
            1 => '10.0.0.0/8',
          ),
          'forwarded_for_headers' => array('HTTP_X_FORWARDED_FOR'),
        );
      phone.config.php: |-
        <?php
        $CONFIG = array (
          'default_phone_region' => 'DE',
        );
      # https://docs.nextcloud.com/server/28/admin_manual/configuration_server/background_jobs_configuration.html#maintenance-window-start
      maintenance_window.config.php: |-
        <?php
        $CONFIG = array (
          'maintenance_window_start' => 1,
        );
      logging.config.php: |-
        <?php
        $CONFIG = array (
          "log_type" => "errorlog",
        );
      trash.config.php: |
        <?php
        $CONFIG = array (
          "trashbin_retention_obligation" => "30, 60",
        );
      versions.config.php: |
        <?php
        $CONFIG = array (
          "versions_retention_obligation" => "30, 180",
        );
      db.config.php: |
        <?php
        $CONFIG = array(
          'dbtype' => 'pgsql',
          'dbuser' => getenv('POSTGRES_USER'),
          'dbpassword' => getenv('POSTGRES_PASSWORD'),
          'dbname' => getenv('POSTGRES_DB'),
          'dbhost' => getenv('POSTGRES_HOST'),
          'dbport' => '',
        );
  internalDatabase:
    enabled: false
  redis:
    enabled: false
  cronjob:
    enabled: true
    type: cronjob # TODO Currently this means the additional job defined in cron-config is not executed.
    cronjob:
      command:
        - bash
        - -x
        - -c
        - >-
             php -f /var/www/html/cron.php -- --verbose
             && php -f /var/www/html/occ preview:pre-generate
             && php -f /var/www/html/occ db:add-missing-indices

      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL

  persistence:
    enabled: true
    existingClaim: nextcloud-app
    nextcloudData:
      enabled: true
      existingClaim: nextcloud-data
  externalDatabase:
    enabled: true
    type: postgresql
    host: pg-nextcloud-rw
    existingSecret:
      enabled: true
      secretName: pg-nextcloud-app
      passwordKey: password
      usernameKey: username

  imaginary:
    enabled: true
    image:
      registry: ghcr.io
      repository: nextcloud-releases/aio-imaginary
      tag: "20251015_082711"
    podSecurityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    securityContext:
      runAsUser: 1000
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
         - ALL